//指定的当前proto语法的版本, 有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: BurpMorePossibility.proto

//import "google/api/annotations.proto";

//包名 服务名称 用于http2路由

package BurpMorePossibilityApi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AuditIssueSeverity 问题严重程度
type AuditIssueSeverity int32

const (
	AuditIssueSeverity_HIGH           AuditIssueSeverity = 0 // 高
	AuditIssueSeverity_MEDIUM         AuditIssueSeverity = 2 // 中
	AuditIssueSeverity_LOW            AuditIssueSeverity = 3 // 低
	AuditIssueSeverity_INFORMATION    AuditIssueSeverity = 4 // 信息
	AuditIssueSeverity_FALSE_POSITIVE AuditIssueSeverity = 5 // 误报
)

// Enum value maps for AuditIssueSeverity.
var (
	AuditIssueSeverity_name = map[int32]string{
		0: "HIGH",
		2: "MEDIUM",
		3: "LOW",
		4: "INFORMATION",
		5: "FALSE_POSITIVE",
	}
	AuditIssueSeverity_value = map[string]int32{
		"HIGH":           0,
		"MEDIUM":         2,
		"LOW":            3,
		"INFORMATION":    4,
		"FALSE_POSITIVE": 5,
	}
)

func (x AuditIssueSeverity) Enum() *AuditIssueSeverity {
	p := new(AuditIssueSeverity)
	*p = x
	return p
}

func (x AuditIssueSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditIssueSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_BurpMorePossibility_proto_enumTypes[0].Descriptor()
}

func (AuditIssueSeverity) Type() protoreflect.EnumType {
	return &file_BurpMorePossibility_proto_enumTypes[0]
}

func (x AuditIssueSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditIssueSeverity.Descriptor instead.
func (AuditIssueSeverity) EnumDescriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{0}
}

// AuditIssueConfidence 问题确定程度
type AuditIssueConfidence int32

const (
	AuditIssueConfidence_CERTAIN   AuditIssueConfidence = 0 // 肯定
	AuditIssueConfidence_FIRM      AuditIssueConfidence = 2 // 确定
	AuditIssueConfidence_TENTATIVE AuditIssueConfidence = 3 // 确定
)

// Enum value maps for AuditIssueConfidence.
var (
	AuditIssueConfidence_name = map[int32]string{
		0: "CERTAIN",
		2: "FIRM",
		3: "TENTATIVE",
	}
	AuditIssueConfidence_value = map[string]int32{
		"CERTAIN":   0,
		"FIRM":      2,
		"TENTATIVE": 3,
	}
)

func (x AuditIssueConfidence) Enum() *AuditIssueConfidence {
	p := new(AuditIssueConfidence)
	*p = x
	return p
}

func (x AuditIssueConfidence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditIssueConfidence) Descriptor() protoreflect.EnumDescriptor {
	return file_BurpMorePossibility_proto_enumTypes[1].Descriptor()
}

func (AuditIssueConfidence) Type() protoreflect.EnumType {
	return &file_BurpMorePossibility_proto_enumTypes[1]
}

func (x AuditIssueConfidence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditIssueConfidence.Descriptor instead.
func (AuditIssueConfidence) EnumDescriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{1}
}

// http来源类型
type HttpSource int32

const (
	HttpSource_Request  HttpSource = 0 // 请求
	HttpSource_Response HttpSource = 1 // 响应
)

// Enum value maps for HttpSource.
var (
	HttpSource_name = map[int32]string{
		0: "Request",
		1: "Response",
	}
	HttpSource_value = map[string]int32{
		"Request":  0,
		"Response": 1,
	}
)

func (x HttpSource) Enum() *HttpSource {
	p := new(HttpSource)
	*p = x
	return p
}

func (x HttpSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpSource) Descriptor() protoreflect.EnumDescriptor {
	return file_BurpMorePossibility_proto_enumTypes[2].Descriptor()
}

func (HttpSource) Type() protoreflect.EnumType {
	return &file_BurpMorePossibility_proto_enumTypes[2]
}

func (x HttpSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpSource.Descriptor instead.
func (HttpSource) EnumDescriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{2}
}

// 流量来源类型
type HttpFlowSource int32

const (
	HttpFlowSource_NULL                    HttpFlowSource = 0 // 空值占位表示null 避免不同语言序列化后无法判断对象是否为空
	HttpFlowSource_SUITE                   HttpFlowSource = 1
	HttpFlowSource_TARGET                  HttpFlowSource = 2
	HttpFlowSource_PROXY                   HttpFlowSource = 3 // 代理器
	HttpFlowSource_SCANNER                 HttpFlowSource = 4
	HttpFlowSource_INTRUDER                HttpFlowSource = 5 // 迭代器
	HttpFlowSource_REPEATER                HttpFlowSource = 6 // 重放器
	HttpFlowSource_LOGGER                  HttpFlowSource = 7
	HttpFlowSource_SEQUENCER               HttpFlowSource = 8
	HttpFlowSource_DECODER                 HttpFlowSource = 9
	HttpFlowSource_COMPARER                HttpFlowSource = 10
	HttpFlowSource_EXTENSIONS              HttpFlowSource = 11
	HttpFlowSource_RECORDED_LOGIN_REPLAYER HttpFlowSource = 12
)

// Enum value maps for HttpFlowSource.
var (
	HttpFlowSource_name = map[int32]string{
		0:  "NULL",
		1:  "SUITE",
		2:  "TARGET",
		3:  "PROXY",
		4:  "SCANNER",
		5:  "INTRUDER",
		6:  "REPEATER",
		7:  "LOGGER",
		8:  "SEQUENCER",
		9:  "DECODER",
		10: "COMPARER",
		11: "EXTENSIONS",
		12: "RECORDED_LOGIN_REPLAYER",
	}
	HttpFlowSource_value = map[string]int32{
		"NULL":                    0,
		"SUITE":                   1,
		"TARGET":                  2,
		"PROXY":                   3,
		"SCANNER":                 4,
		"INTRUDER":                5,
		"REPEATER":                6,
		"LOGGER":                  7,
		"SEQUENCER":               8,
		"DECODER":                 9,
		"COMPARER":                10,
		"EXTENSIONS":              11,
		"RECORDED_LOGIN_REPLAYER": 12,
	}
)

func (x HttpFlowSource) Enum() *HttpFlowSource {
	p := new(HttpFlowSource)
	*p = x
	return p
}

func (x HttpFlowSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpFlowSource) Descriptor() protoreflect.EnumDescriptor {
	return file_BurpMorePossibility_proto_enumTypes[3].Descriptor()
}

func (HttpFlowSource) Type() protoreflect.EnumType {
	return &file_BurpMorePossibility_proto_enumTypes[3]
}

func (x HttpFlowSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpFlowSource.Descriptor instead.
func (HttpFlowSource) EnumDescriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{3}
}

// 服务类型名称
type ServerTypeName int32

const (
	ServerTypeName_NOLL               ServerTypeName = 0 // 空值占位 避免不同语言序列化后无法判断是否有值
	ServerTypeName_INTRUDER_PROCESSOR ServerTypeName = 1 // 迭代处理器
	ServerTypeName_INTRUDER_GENERATE  ServerTypeName = 2 // 迭代生成器
	// REAL_TIME_TRAFFIC_MIRRORING = 3;   // 实时流量镜像   不允许注册流量镜像 要不手动要不直接通过服务端流建立镜像流
	// HTTP_EDITOR_KEY_VALUE = 4;         // http键值对用于相互转换  先废除
	ServerTypeName_HTTP_REQUEST_EDITOR_PROCESSOR  ServerTypeName = 5  // 请求编辑处理器
	ServerTypeName_HTTP_RESPONSE_EDITOR_PROCESSOR ServerTypeName = 6  // 响应编辑处理器
	ServerTypeName_CONTEXT_MENU_ITEMS_PROVIDER    ServerTypeName = 7  // 上下文菜单提供程序
	ServerTypeName_PROXY_REQUEST_HANDLER          ServerTypeName = 8  // 代理请求处理器
	ServerTypeName_PROXY_RESPONSE_HANDLER         ServerTypeName = 9  // 代理响应处理器
	ServerTypeName_HTTP_FLOW_HANDLER              ServerTypeName = 10 // http请求处理器
)

// Enum value maps for ServerTypeName.
var (
	ServerTypeName_name = map[int32]string{
		0:  "NOLL",
		1:  "INTRUDER_PROCESSOR",
		2:  "INTRUDER_GENERATE",
		5:  "HTTP_REQUEST_EDITOR_PROCESSOR",
		6:  "HTTP_RESPONSE_EDITOR_PROCESSOR",
		7:  "CONTEXT_MENU_ITEMS_PROVIDER",
		8:  "PROXY_REQUEST_HANDLER",
		9:  "PROXY_RESPONSE_HANDLER",
		10: "HTTP_FLOW_HANDLER",
	}
	ServerTypeName_value = map[string]int32{
		"NOLL":                           0,
		"INTRUDER_PROCESSOR":             1,
		"INTRUDER_GENERATE":              2,
		"HTTP_REQUEST_EDITOR_PROCESSOR":  5,
		"HTTP_RESPONSE_EDITOR_PROCESSOR": 6,
		"CONTEXT_MENU_ITEMS_PROVIDER":    7,
		"PROXY_REQUEST_HANDLER":          8,
		"PROXY_RESPONSE_HANDLER":         9,
		"HTTP_FLOW_HANDLER":              10,
	}
)

func (x ServerTypeName) Enum() *ServerTypeName {
	p := new(ServerTypeName)
	*p = x
	return p
}

func (x ServerTypeName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerTypeName) Descriptor() protoreflect.EnumDescriptor {
	return file_BurpMorePossibility_proto_enumTypes[4].Descriptor()
}

func (ServerTypeName) Type() protoreflect.EnumType {
	return &file_BurpMorePossibility_proto_enumTypes[4]
}

func (x ServerTypeName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerTypeName.Descriptor instead.
func (ServerTypeName) EnumDescriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{4}
}

// 注解颜色
type HighlightColor int32

const (
	HighlightColor_NONE    HighlightColor = 0 // 没有任何颜色
	HighlightColor_RED     HighlightColor = 1
	HighlightColor_ORANGE  HighlightColor = 2
	HighlightColor_YELLOW  HighlightColor = 3
	HighlightColor_GREEN   HighlightColor = 4
	HighlightColor_CYAN    HighlightColor = 5
	HighlightColor_BLUE    HighlightColor = 6
	HighlightColor_PINK    HighlightColor = 7
	HighlightColor_MAGENTA HighlightColor = 8
	HighlightColor_GRAY    HighlightColor = 9
)

// Enum value maps for HighlightColor.
var (
	HighlightColor_name = map[int32]string{
		0: "NONE",
		1: "RED",
		2: "ORANGE",
		3: "YELLOW",
		4: "GREEN",
		5: "CYAN",
		6: "BLUE",
		7: "PINK",
		8: "MAGENTA",
		9: "GRAY",
	}
	HighlightColor_value = map[string]int32{
		"NONE":    0,
		"RED":     1,
		"ORANGE":  2,
		"YELLOW":  3,
		"GREEN":   4,
		"CYAN":    5,
		"BLUE":    6,
		"PINK":    7,
		"MAGENTA": 8,
		"GRAY":    9,
	}
)

func (x HighlightColor) Enum() *HighlightColor {
	p := new(HighlightColor)
	*p = x
	return p
}

func (x HighlightColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HighlightColor) Descriptor() protoreflect.EnumDescriptor {
	return file_BurpMorePossibility_proto_enumTypes[5].Descriptor()
}

func (HighlightColor) Type() protoreflect.EnumType {
	return &file_BurpMorePossibility_proto_enumTypes[5]
}

func (x HighlightColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HighlightColor.Descriptor instead.
func (HighlightColor) EnumDescriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{5}
}

// AuditIssue 审计问题
type AuditIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                                                                        // 名称
	Detail                string               `protobuf:"bytes,2,opt,name=Detail,proto3" json:"Detail,omitempty"`                                                                    // 详情
	Remediation           string               `protobuf:"bytes,3,opt,name=Remediation,proto3" json:"Remediation,omitempty"`                                                          // 修复建议
	BaseUrl               string               `protobuf:"bytes,4,opt,name=BaseUrl,proto3" json:"BaseUrl,omitempty"`                                                                  // 基础url
	Severity              AuditIssueSeverity   `protobuf:"varint,8,opt,name=severity,proto3,enum=BurpMorePossibilityApi.AuditIssueSeverity" json:"severity,omitempty"`                // 问题严重程度
	Confidence            AuditIssueConfidence `protobuf:"varint,9,opt,name=confidence,proto3,enum=BurpMorePossibilityApi.AuditIssueConfidence" json:"confidence,omitempty"`          // 问题确定程度
	Background            string               `protobuf:"bytes,5,opt,name=Background,proto3" json:"Background,omitempty"`                                                            // 问题背景
	RemediationBackground string               `protobuf:"bytes,7,opt,name=remediationBackground,proto3" json:"remediationBackground,omitempty"`                                      // 修复详情
	TypicalSeverity       AuditIssueSeverity   `protobuf:"varint,10,opt,name=typicalSeverity,proto3,enum=BurpMorePossibilityApi.AuditIssueSeverity" json:"typicalSeverity,omitempty"` // 典型严重程度
	HttpGroup             []*HttpReqAndRes     `protobuf:"bytes,11,rep,name=HttpGroup,proto3" json:"HttpGroup,omitempty"`                                                             // 一组http数据 请求 / 响应
}

func (x *AuditIssue) Reset() {
	*x = AuditIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditIssue) ProtoMessage() {}

func (x *AuditIssue) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditIssue.ProtoReflect.Descriptor instead.
func (*AuditIssue) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{0}
}

func (x *AuditIssue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuditIssue) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *AuditIssue) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *AuditIssue) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *AuditIssue) GetSeverity() AuditIssueSeverity {
	if x != nil {
		return x.Severity
	}
	return AuditIssueSeverity_HIGH
}

func (x *AuditIssue) GetConfidence() AuditIssueConfidence {
	if x != nil {
		return x.Confidence
	}
	return AuditIssueConfidence_CERTAIN
}

func (x *AuditIssue) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *AuditIssue) GetRemediationBackground() string {
	if x != nil {
		return x.RemediationBackground
	}
	return ""
}

func (x *AuditIssue) GetTypicalSeverity() AuditIssueSeverity {
	if x != nil {
		return x.TypicalSeverity
	}
	return AuditIssueSeverity_HIGH
}

func (x *AuditIssue) GetHttpGroup() []*HttpReqAndRes {
	if x != nil {
		return x.HttpGroup
	}
	return nil
}

// http流量请求数据
type HttpFlowReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpReqGroup   *HttpReqGroup  `protobuf:"bytes,1,opt,name=httpReqGroup,proto3" json:"httpReqGroup,omitempty"`
	HttpFlowSource HttpFlowSource `protobuf:"varint,2,opt,name=httpFlowSource,proto3,enum=BurpMorePossibilityApi.HttpFlowSource" json:"httpFlowSource,omitempty"`
}

func (x *HttpFlowReqData) Reset() {
	*x = HttpFlowReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFlowReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFlowReqData) ProtoMessage() {}

func (x *HttpFlowReqData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFlowReqData.ProtoReflect.Descriptor instead.
func (*HttpFlowReqData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{1}
}

func (x *HttpFlowReqData) GetHttpReqGroup() *HttpReqGroup {
	if x != nil {
		return x.HttpReqGroup
	}
	return nil
}

func (x *HttpFlowReqData) GetHttpFlowSource() HttpFlowSource {
	if x != nil {
		return x.HttpFlowSource
	}
	return HttpFlowSource_NULL
}

// http流量响应数据
type HttpFlowResData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpReqAndRes  *HttpReqAndRes `protobuf:"bytes,1,opt,name=httpReqAndRes,proto3" json:"httpReqAndRes,omitempty"`
	HttpFlowSource HttpFlowSource `protobuf:"varint,2,opt,name=httpFlowSource,proto3,enum=BurpMorePossibilityApi.HttpFlowSource" json:"httpFlowSource,omitempty"`
}

func (x *HttpFlowResData) Reset() {
	*x = HttpFlowResData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFlowResData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFlowResData) ProtoMessage() {}

func (x *HttpFlowResData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFlowResData.ProtoReflect.Descriptor instead.
func (*HttpFlowResData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{2}
}

func (x *HttpFlowResData) GetHttpReqAndRes() *HttpReqAndRes {
	if x != nil {
		return x.HttpReqAndRes
	}
	return nil
}

func (x *HttpFlowResData) GetHttpFlowSource() HttpFlowSource {
	if x != nil {
		return x.HttpFlowSource
	}
	return HttpFlowSource_NULL
}

// 迭代处理器数据 包含调用的名称用于应对多种不同类型调用
type PayloadProcessorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // 名称
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"` // 载荷
}

func (x *PayloadProcessorData) Reset() {
	*x = PayloadProcessorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadProcessorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadProcessorData) ProtoMessage() {}

func (x *PayloadProcessorData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadProcessorData.ProtoReflect.Descriptor instead.
func (*PayloadProcessorData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{3}
}

func (x *PayloadProcessorData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayloadProcessorData) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 代理历史流量数据
type ProxyHistoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpReqAndResData []*HttpReqAndRes `protobuf:"bytes,1,rep,name=httpReqAndResData,proto3" json:"httpReqAndResData,omitempty"`
}

func (x *ProxyHistoryData) Reset() {
	*x = ProxyHistoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyHistoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyHistoryData) ProtoMessage() {}

func (x *ProxyHistoryData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyHistoryData.ProtoReflect.Descriptor instead.
func (*ProxyHistoryData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{4}
}

func (x *ProxyHistoryData) GetHttpReqAndResData() []*HttpReqAndRes {
	if x != nil {
		return x.HttpReqAndResData
	}
	return nil
}

// 下标的偏移量 用于在字节流中定位准确数据
type SubscriptOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndex int64 `protobuf:"varint,1,opt,name=startIndex,proto3" json:"startIndex,omitempty"` // 开始下标
	EndIndex   int64 `protobuf:"varint,2,opt,name=endIndex,proto3" json:"endIndex,omitempty"`     // 结束下标
}

func (x *SubscriptOffsets) Reset() {
	*x = SubscriptOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptOffsets) ProtoMessage() {}

func (x *SubscriptOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptOffsets.ProtoReflect.Descriptor instead.
func (*SubscriptOffsets) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriptOffsets) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *SubscriptOffsets) GetEndIndex() int64 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

// http请求操作
type HttpRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continue     bool          `protobuf:"varint,1,opt,name=continue,proto3" json:"continue,omitempty"`       // 继续不做任何处理
	IsReviseReq  bool          `protobuf:"varint,3,opt,name=isReviseReq,proto3" json:"isReviseReq,omitempty"` // 修改请求
	HttpReqGroup *HttpReqGroup `protobuf:"bytes,4,opt,name=httpReqGroup,proto3" json:"httpReqGroup,omitempty"`
}

func (x *HttpRequestAction) Reset() {
	*x = HttpRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequestAction) ProtoMessage() {}

func (x *HttpRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequestAction.ProtoReflect.Descriptor instead.
func (*HttpRequestAction) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{6}
}

func (x *HttpRequestAction) GetContinue() bool {
	if x != nil {
		return x.Continue
	}
	return false
}

func (x *HttpRequestAction) GetIsReviseReq() bool {
	if x != nil {
		return x.IsReviseReq
	}
	return false
}

func (x *HttpRequestAction) GetHttpReqGroup() *HttpReqGroup {
	if x != nil {
		return x.HttpReqGroup
	}
	return nil
}

// http响应操作
type HttpResponseAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continue     bool          `protobuf:"varint,1,opt,name=continue,proto3" json:"continue,omitempty"`       // 继续不做任何处理
	IsReviseRes  bool          `protobuf:"varint,3,opt,name=isReviseRes,proto3" json:"isReviseRes,omitempty"` // 修改响应
	HttpResGroup *HttpResGroup `protobuf:"bytes,4,opt,name=httpResGroup,proto3" json:"httpResGroup,omitempty"`
}

func (x *HttpResponseAction) Reset() {
	*x = HttpResponseAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResponseAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponseAction) ProtoMessage() {}

func (x *HttpResponseAction) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponseAction.ProtoReflect.Descriptor instead.
func (*HttpResponseAction) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{7}
}

func (x *HttpResponseAction) GetContinue() bool {
	if x != nil {
		return x.Continue
	}
	return false
}

func (x *HttpResponseAction) GetIsReviseRes() bool {
	if x != nil {
		return x.IsReviseRes
	}
	return false
}

func (x *HttpResponseAction) GetHttpResGroup() *HttpResGroup {
	if x != nil {
		return x.HttpResGroup
	}
	return nil
}

// 收到代理请求的操作
type ProxyRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continue     bool          `protobuf:"varint,1,opt,name=continue,proto3" json:"continue,omitempty"`       // 继续不做任何处理
	Drop         bool          `protobuf:"varint,2,opt,name=drop,proto3" json:"drop,omitempty"`               // 丢弃请求
	IsReviseReq  bool          `protobuf:"varint,3,opt,name=isReviseReq,proto3" json:"isReviseReq,omitempty"` // 修改请求
	IsIntercept  bool          `protobuf:"varint,4,opt,name=isIntercept,proto3" json:"isIntercept,omitempty"` // 是否拦截   无论是否修改都要返回数据也就是httpReqData 字段
	HttpReqGroup *HttpReqGroup `protobuf:"bytes,5,opt,name=httpReqGroup,proto3" json:"httpReqGroup,omitempty"`
}

func (x *ProxyRequestAction) Reset() {
	*x = ProxyRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyRequestAction) ProtoMessage() {}

func (x *ProxyRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyRequestAction.ProtoReflect.Descriptor instead.
func (*ProxyRequestAction) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{8}
}

func (x *ProxyRequestAction) GetContinue() bool {
	if x != nil {
		return x.Continue
	}
	return false
}

func (x *ProxyRequestAction) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *ProxyRequestAction) GetIsReviseReq() bool {
	if x != nil {
		return x.IsReviseReq
	}
	return false
}

func (x *ProxyRequestAction) GetIsIntercept() bool {
	if x != nil {
		return x.IsIntercept
	}
	return false
}

func (x *ProxyRequestAction) GetHttpReqGroup() *HttpReqGroup {
	if x != nil {
		return x.HttpReqGroup
	}
	return nil
}

// 收到代理响应的操作
type ProxyResponseAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continue     bool          `protobuf:"varint,1,opt,name=continue,proto3" json:"continue,omitempty"`       // 继续不做任何处理
	Drop         bool          `protobuf:"varint,2,opt,name=drop,proto3" json:"drop,omitempty"`               // 丢弃响应
	IsReviseRes  bool          `protobuf:"varint,3,opt,name=isReviseRes,proto3" json:"isReviseRes,omitempty"` // 修改响应
	IsIntercept  bool          `protobuf:"varint,4,opt,name=isIntercept,proto3" json:"isIntercept,omitempty"` // 是否拦截  无论是否修改都要返回数据也就是httpReqData 字段
	HttpResGroup *HttpResGroup `protobuf:"bytes,5,opt,name=httpResGroup,proto3" json:"httpResGroup,omitempty"`
}

func (x *ProxyResponseAction) Reset() {
	*x = ProxyResponseAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyResponseAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyResponseAction) ProtoMessage() {}

func (x *ProxyResponseAction) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyResponseAction.ProtoReflect.Descriptor instead.
func (*ProxyResponseAction) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{9}
}

func (x *ProxyResponseAction) GetContinue() bool {
	if x != nil {
		return x.Continue
	}
	return false
}

func (x *ProxyResponseAction) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *ProxyResponseAction) GetIsReviseRes() bool {
	if x != nil {
		return x.IsReviseRes
	}
	return false
}

func (x *ProxyResponseAction) GetIsIntercept() bool {
	if x != nil {
		return x.IsIntercept
	}
	return false
}

func (x *ProxyResponseAction) GetHttpResGroup() *HttpResGroup {
	if x != nil {
		return x.HttpResGroup
	}
	return nil
}

// http编辑框数据, 名字
type HttpEditBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                           // 名字 编辑器名称
	HttpReqAndResData *HttpReqAndRes `protobuf:"bytes,2,opt,name=httpReqAndResData,proto3" json:"httpReqAndResData,omitempty"` // 一组http数据 请求 / 响应
	Info              string         `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`                           // 预留字段
}

func (x *HttpEditBoxData) Reset() {
	*x = HttpEditBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpEditBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpEditBoxData) ProtoMessage() {}

func (x *HttpEditBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpEditBoxData.ProtoReflect.Descriptor instead.
func (*HttpEditBoxData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{10}
}

func (x *HttpEditBoxData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpEditBoxData) GetHttpReqAndResData() *HttpReqAndRes {
	if x != nil {
		return x.HttpReqAndResData
	}
	return nil
}

func (x *HttpEditBoxData) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// http键值对信息, 明文密文可相互匹配
type HttpKeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain     string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`         // 域名作用域 正则表达式 用于匹配适用的url
	Ciphertext []byte `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"` // 明文数据
	Plaintext  []byte `protobuf:"bytes,3,opt,name=plaintext,proto3" json:"plaintext,omitempty"`   // 密文数据
}

func (x *HttpKeyValuePair) Reset() {
	*x = HttpKeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpKeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpKeyValuePair) ProtoMessage() {}

func (x *HttpKeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpKeyValuePair.ProtoReflect.Descriptor instead.
func (*HttpKeyValuePair) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{11}
}

func (x *HttpKeyValuePair) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HttpKeyValuePair) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *HttpKeyValuePair) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

// http编辑器的键值对用于命中密文转换为明文, 没命中将不会显示
type HttpEditorKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        *ByteData `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`               // 键
	Value      *ByteData `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`           // 值
	EditorName *Str      `protobuf:"bytes,3,opt,name=editorName,proto3" json:"editorName,omitempty"` // 编辑器名称
}

func (x *HttpEditorKeyValue) Reset() {
	*x = HttpEditorKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpEditorKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpEditorKeyValue) ProtoMessage() {}

func (x *HttpEditorKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpEditorKeyValue.ProtoReflect.Descriptor instead.
func (*HttpEditorKeyValue) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{12}
}

func (x *HttpEditorKeyValue) GetKey() *ByteData {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HttpEditorKeyValue) GetValue() *ByteData {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HttpEditorKeyValue) GetEditorName() *Str {
	if x != nil {
		return x.EditorName
	}
	return nil
}

// 一个上下文菜单项信息
type MenuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string name = 1;  // 名称
	TarGet string `protobuf:"bytes,2,opt,name=tarGet,proto3" json:"tarGet,omitempty"` // 服务地址往后菜单项都用这个地址服务
	Menu   *Menu  `protobuf:"bytes,3,opt,name=menu,proto3" json:"menu,omitempty"`     // 菜单项
}

func (x *MenuInfo) Reset() {
	*x = MenuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuInfo) ProtoMessage() {}

func (x *MenuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuInfo.ProtoReflect.Descriptor instead.
func (*MenuInfo) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{13}
}

func (x *MenuInfo) GetTarGet() string {
	if x != nil {
		return x.TarGet
	}
	return ""
}

func (x *MenuInfo) GetMenu() *Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

// 菜单 菜单下可包含多个菜单和菜单项
type Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MenuList     []*Menu     `protobuf:"bytes,2,rep,name=menuList,proto3" json:"menuList,omitempty"`
	MenuItemList []*MenuItem `protobuf:"bytes,3,rep,name=menuItemList,proto3" json:"menuItemList,omitempty"`
}

func (x *Menu) Reset() {
	*x = Menu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{14}
}

func (x *Menu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Menu) GetMenuList() []*Menu {
	if x != nil {
		return x.MenuList
	}
	return nil
}

func (x *Menu) GetMenuItemList() []*MenuItem {
	if x != nil {
		return x.MenuItemList
	}
	return nil
}

// 菜单项 实际处理程序用于点击
type MenuItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MenuItem) Reset() {
	*x = MenuItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItem) ProtoMessage() {}

func (x *MenuItem) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItem.ProtoReflect.Descriptor instead.
func (*MenuItem) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{15}
}

func (x *MenuItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 上下文处理器 , 提供 一组请求响应 和选中的数据
type ContextMenuItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                         //名称
	IsSelect      bool              `protobuf:"varint,2,opt,name=isSelect,proto3" json:"isSelect,omitempty"`                                                // 是否有选中的数据
	SelectSource  HttpSource        `protobuf:"varint,3,opt,name=selectSource,proto3,enum=BurpMorePossibilityApi.HttpSource" json:"selectSource,omitempty"` // 选中来源 只有选中数据才能知道从哪点的
	HttpReqAndRes *HttpReqAndRes    `protobuf:"bytes,4,opt,name=httpReqAndRes,proto3" json:"httpReqAndRes,omitempty"`                                       // 一组请求和响应
	SelectData    []byte            `protobuf:"bytes,5,opt,name=selectData,proto3" json:"selectData,omitempty"`                                             // 用户选中的数据
	SelectOffsets *SubscriptOffsets `protobuf:"bytes,6,opt,name=selectOffsets,proto3" json:"selectOffsets,omitempty"`                                       // 选中的下标偏移量
}

func (x *ContextMenuItems) Reset() {
	*x = ContextMenuItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextMenuItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextMenuItems) ProtoMessage() {}

func (x *ContextMenuItems) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextMenuItems.ProtoReflect.Descriptor instead.
func (*ContextMenuItems) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{16}
}

func (x *ContextMenuItems) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContextMenuItems) GetIsSelect() bool {
	if x != nil {
		return x.IsSelect
	}
	return false
}

func (x *ContextMenuItems) GetSelectSource() HttpSource {
	if x != nil {
		return x.SelectSource
	}
	return HttpSource_Request
}

func (x *ContextMenuItems) GetHttpReqAndRes() *HttpReqAndRes {
	if x != nil {
		return x.HttpReqAndRes
	}
	return nil
}

func (x *ContextMenuItems) GetSelectData() []byte {
	if x != nil {
		return x.SelectData
	}
	return nil
}

func (x *ContextMenuItems) GetSelectOffsets() *SubscriptOffsets {
	if x != nil {
		return x.SelectOffsets
	}
	return nil
}

// 菜单项返回 给burp 要做的操作
type MenuItemsReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContinue     bool   `protobuf:"varint,1,opt,name=IsContinue,proto3" json:"IsContinue,omitempty"`         // 继续不做任何处理
	IsReviseSelect bool   `protobuf:"varint,2,opt,name=IsReviseSelect,proto3" json:"IsReviseSelect,omitempty"` // 修改选中数据
	IsReviseReq    bool   `protobuf:"varint,3,opt,name=IsReviseReq,proto3" json:"IsReviseReq,omitempty"`       // 修改请求
	IsReviseRes    bool   `protobuf:"varint,4,opt,name=IsReviseRes,proto3" json:"IsReviseRes,omitempty"`       // 修改响应 此前burp 可修改重放器响应现在不能 先保留
	ReqData        []byte `protobuf:"bytes,5,opt,name=ReqData,proto3" json:"ReqData,omitempty"`                // 请求数据用于覆盖burp 请求   用于修改 http编辑框
	ResData        []byte `protobuf:"bytes,6,opt,name=ResData,proto3" json:"ResData,omitempty"`                // 请求数据用于覆盖burp 请求   用于修改 http编辑框
	SelectDate     []byte `protobuf:"bytes,7,opt,name=SelectDate,proto3" json:"SelectDate,omitempty"`          // 选中数据 用于替换 用户在重放器选中的数据
}

func (x *MenuItemsReturn) Reset() {
	*x = MenuItemsReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuItemsReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItemsReturn) ProtoMessage() {}

func (x *MenuItemsReturn) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItemsReturn.ProtoReflect.Descriptor instead.
func (*MenuItemsReturn) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{17}
}

func (x *MenuItemsReturn) GetIsContinue() bool {
	if x != nil {
		return x.IsContinue
	}
	return false
}

func (x *MenuItemsReturn) GetIsReviseSelect() bool {
	if x != nil {
		return x.IsReviseSelect
	}
	return false
}

func (x *MenuItemsReturn) GetIsReviseReq() bool {
	if x != nil {
		return x.IsReviseReq
	}
	return false
}

func (x *MenuItemsReturn) GetIsReviseRes() bool {
	if x != nil {
		return x.IsReviseRes
	}
	return false
}

func (x *MenuItemsReturn) GetReqData() []byte {
	if x != nil {
		return x.ReqData
	}
	return nil
}

func (x *MenuItemsReturn) GetResData() []byte {
	if x != nil {
		return x.ResData
	}
	return nil
}

func (x *MenuItemsReturn) GetSelectDate() []byte {
	if x != nil {
		return x.SelectDate
	}
	return nil
}

// 布尔值
type Boole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boole bool `protobuf:"varint,1,opt,name=boole,proto3" json:"boole,omitempty"`
}

func (x *Boole) Reset() {
	*x = Boole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boole) ProtoMessage() {}

func (x *Boole) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boole.ProtoReflect.Descriptor instead.
func (*Boole) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{18}
}

func (x *Boole) GetBoole() bool {
	if x != nil {
		return x.Boole
	}
	return false
}

// 状态,用于表示函数执行状态，服务或对象状态
type ProcessingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boole bool   `protobuf:"varint,1,opt,name=boole,proto3" json:"boole,omitempty"` // 布尔值
	Info  string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`    // 描述信息
}

func (x *ProcessingStatus) Reset() {
	*x = ProcessingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingStatus) ProtoMessage() {}

func (x *ProcessingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingStatus.ProtoReflect.Descriptor instead.
func (*ProcessingStatus) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{19}
}

func (x *ProcessingStatus) GetBoole() bool {
	if x != nil {
		return x.Boole
	}
	return false
}

func (x *ProcessingStatus) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// 名称 String类型
type Str struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Str) Reset() {
	*x = Str{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Str) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Str) ProtoMessage() {}

func (x *Str) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Str.ProtoReflect.Descriptor instead.
func (*Str) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{20}
}

func (x *Str) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 服务路由表 包含零号以及第三方拓展愿意向burp提供的服务
type ServiceRoutingTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routing []*ServiceRegisterRouting `protobuf:"bytes,1,rep,name=Routing,proto3" json:"Routing,omitempty"`
}

func (x *ServiceRoutingTable) Reset() {
	*x = ServiceRoutingTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRoutingTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRoutingTable) ProtoMessage() {}

func (x *ServiceRoutingTable) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRoutingTable.ProtoReflect.Descriptor instead.
func (*ServiceRoutingTable) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{21}
}

func (x *ServiceRoutingTable) GetRouting() []*ServiceRegisterRouting {
	if x != nil {
		return x.Routing
	}
	return nil
}

// 服务注册路由
type ServiceRegisterRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerType  ServerTypeName `protobuf:"varint,1,opt,name=serverType,proto3,enum=BurpMorePossibilityApi.ServerTypeName" json:"serverType,omitempty"` // 服务类型
	Name        string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                                                         // 名称
	GrpcAddress string         `protobuf:"bytes,3,opt,name=GrpcAddress,proto3" json:"GrpcAddress,omitempty"`                                           // grpc地址
}

func (x *ServiceRegisterRouting) Reset() {
	*x = ServiceRegisterRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRegisterRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRegisterRouting) ProtoMessage() {}

func (x *ServiceRegisterRouting) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRegisterRouting.ProtoReflect.Descriptor instead.
func (*ServiceRegisterRouting) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{22}
}

func (x *ServiceRegisterRouting) GetServerType() ServerTypeName {
	if x != nil {
		return x.ServerType
	}
	return ServerTypeName_NOLL
}

func (x *ServiceRegisterRouting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceRegisterRouting) GetGrpcAddress() string {
	if x != nil {
		return x.GrpcAddress
	}
	return ""
}

// 服务注册列表 用于表示服务列表
type ServiceRegisterRoutingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceList []*ServiceRegisterRouting `protobuf:"bytes,1,rep,name=serviceList,proto3" json:"serviceList,omitempty"`
}

func (x *ServiceRegisterRoutingList) Reset() {
	*x = ServiceRegisterRoutingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRegisterRoutingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRegisterRoutingList) ProtoMessage() {}

func (x *ServiceRegisterRoutingList) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRegisterRoutingList.ProtoReflect.Descriptor instead.
func (*ServiceRegisterRoutingList) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{23}
}

func (x *ServiceRegisterRoutingList) GetServiceList() []*ServiceRegisterRouting {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

// 迭代生成器 数据
type IntruderGeneratorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentData            []byte                   `protobuf:"bytes,1,opt,name=contentData,proto3" json:"contentData,omitempty"`                       // http 请求模板
	InsertionPointOffsets  []*InsertionPointOffsets `protobuf:"bytes,2,rep,name=insertionPointOffsets,proto3" json:"insertionPointOffsets,omitempty"`   // 插入点列表
	IntruderInsertionPoint []byte                   `protobuf:"bytes,3,opt,name=IntruderInsertionPoint,proto3" json:"IntruderInsertionPoint,omitempty"` //插入点基值
	Name                   string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                     // 名称
}

func (x *IntruderGeneratorData) Reset() {
	*x = IntruderGeneratorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntruderGeneratorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntruderGeneratorData) ProtoMessage() {}

func (x *IntruderGeneratorData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntruderGeneratorData.ProtoReflect.Descriptor instead.
func (*IntruderGeneratorData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{24}
}

func (x *IntruderGeneratorData) GetContentData() []byte {
	if x != nil {
		return x.ContentData
	}
	return nil
}

func (x *IntruderGeneratorData) GetInsertionPointOffsets() []*InsertionPointOffsets {
	if x != nil {
		return x.InsertionPointOffsets
	}
	return nil
}

func (x *IntruderGeneratorData) GetIntruderInsertionPoint() []byte {
	if x != nil {
		return x.IntruderInsertionPoint
	}
	return nil
}

func (x *IntruderGeneratorData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 插入点
type InsertionPointOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndex int64 `protobuf:"varint,1,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"` // 开始下标
	EndIndex   int64 `protobuf:"varint,2,opt,name=EndIndex,proto3" json:"EndIndex,omitempty"`     // 结束下标
}

func (x *InsertionPointOffsets) Reset() {
	*x = InsertionPointOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertionPointOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertionPointOffsets) ProtoMessage() {}

func (x *InsertionPointOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertionPointOffsets.ProtoReflect.Descriptor instead.
func (*InsertionPointOffsets) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{25}
}

func (x *InsertionPointOffsets) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *InsertionPointOffsets) GetEndIndex() int64 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

// 字节数据
type ByteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteData []byte `protobuf:"bytes,1,opt,name=byteData,proto3" json:"byteData,omitempty"`
}

func (x *ByteData) Reset() {
	*x = ByteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteData) ProtoMessage() {}

func (x *ByteData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteData.ProtoReflect.Descriptor instead.
func (*ByteData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{26}
}

func (x *ByteData) GetByteData() []byte {
	if x != nil {
		return x.ByteData
	}
	return nil
}

// 载荷生成器结果
type PayloadGeneratorResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteData []byte `protobuf:"bytes,1,opt,name=byteData,proto3" json:"byteData,omitempty"` // 生成的载荷
	IsEnd    bool   `protobuf:"varint,2,opt,name=IsEnd,proto3" json:"IsEnd,omitempty"`      // 是否结束 true 为结束
}

func (x *PayloadGeneratorResult) Reset() {
	*x = PayloadGeneratorResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadGeneratorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadGeneratorResult) ProtoMessage() {}

func (x *PayloadGeneratorResult) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadGeneratorResult.ProtoReflect.Descriptor instead.
func (*PayloadGeneratorResult) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{27}
}

func (x *PayloadGeneratorResult) GetByteData() []byte {
	if x != nil {
		return x.ByteData
	}
	return nil
}

func (x *PayloadGeneratorResult) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

// 一组http请求 (请求和响应)
type HttpReqAndRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req             *HttpReqData     `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Res             *HttpResData     `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	Info            *HttpInfo        `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	AnnotationsText *AnnotationsText `protobuf:"bytes,4,opt,name=annotationsText,proto3" json:"annotationsText,omitempty"`
}

func (x *HttpReqAndRes) Reset() {
	*x = HttpReqAndRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpReqAndRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpReqAndRes) ProtoMessage() {}

func (x *HttpReqAndRes) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpReqAndRes.ProtoReflect.Descriptor instead.
func (*HttpReqAndRes) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{28}
}

func (x *HttpReqAndRes) GetReq() *HttpReqData {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *HttpReqAndRes) GetRes() *HttpResData {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *HttpReqAndRes) GetInfo() *HttpInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *HttpReqAndRes) GetAnnotationsText() *AnnotationsText {
	if x != nil {
		return x.AnnotationsText
	}
	return nil
}

// http 单个请求 包含头部和体
type HttpReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []byte          `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`                     //请求包数据
	Url            string          `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`                       //请求url
	BodyIndex      int64           `protobuf:"varint,3,opt,name=BodyIndex,proto3" json:"BodyIndex,omitempty"`          //请求体开始下标,如若请求体下标与总长度一致就是没有请求体
	HttpVersion    string          `protobuf:"bytes,4,opt,name=httpVersion,proto3" json:"httpVersion,omitempty"`       // http版本
	HttpReqService *HttpReqService `protobuf:"bytes,5,opt,name=httpReqService,proto3" json:"httpReqService,omitempty"` // 目标信息
	Range          []*Range        `protobuf:"bytes,6,rep,name=Range,proto3" json:"Range,omitempty"`                   // 标记请求体范围
}

func (x *HttpReqData) Reset() {
	*x = HttpReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpReqData) ProtoMessage() {}

func (x *HttpReqData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpReqData.ProtoReflect.Descriptor instead.
func (*HttpReqData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{29}
}

func (x *HttpReqData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HttpReqData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpReqData) GetBodyIndex() int64 {
	if x != nil {
		return x.BodyIndex
	}
	return 0
}

func (x *HttpReqData) GetHttpVersion() string {
	if x != nil {
		return x.HttpVersion
	}
	return ""
}

func (x *HttpReqData) GetHttpReqService() *HttpReqService {
	if x != nil {
		return x.HttpReqService
	}
	return nil
}

func (x *HttpReqData) GetRange() []*Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// Range 标记下标范围
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndexInclusive int64 `protobuf:"varint,1,opt,name=startIndexInclusive,proto3" json:"startIndexInclusive,omitempty"`
	EndIndexExclusive   int64 `protobuf:"varint,2,opt,name=endIndexExclusive,proto3" json:"endIndexExclusive,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{30}
}

func (x *Range) GetStartIndexInclusive() int64 {
	if x != nil {
		return x.StartIndexInclusive
	}
	return 0
}

func (x *Range) GetEndIndexExclusive() int64 {
	if x != nil {
		return x.EndIndexExclusive
	}
	return 0
}

// 单个请求组 用于包含 不同服务请求中的附带信息
type HttpReqGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpReqData     *HttpReqData     `protobuf:"bytes,1,opt,name=httpReqData,proto3" json:"httpReqData,omitempty"`
	AnnotationsText *AnnotationsText `protobuf:"bytes,2,opt,name=annotationsText,proto3" json:"annotationsText,omitempty"`
}

func (x *HttpReqGroup) Reset() {
	*x = HttpReqGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpReqGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpReqGroup) ProtoMessage() {}

func (x *HttpReqGroup) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpReqGroup.ProtoReflect.Descriptor instead.
func (*HttpReqGroup) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{31}
}

func (x *HttpReqGroup) GetHttpReqData() *HttpReqData {
	if x != nil {
		return x.HttpReqData
	}
	return nil
}

func (x *HttpReqGroup) GetAnnotationsText() *AnnotationsText {
	if x != nil {
		return x.AnnotationsText
	}
	return nil
}

// http 单个响应 包含头部和体
type HttpResData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`              //请求包数据
	StatusCode  int32    `protobuf:"varint,2,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"` //状态码
	BodyIndex   int64    `protobuf:"varint,3,opt,name=BodyIndex,proto3" json:"BodyIndex,omitempty"`   //请求体开始下标,如若请求体下标与总长度一致就是没有请求体
	HttpVersion string   `protobuf:"bytes,5,opt,name=httpVersion,proto3" json:"httpVersion,omitempty"`
	Range       []*Range `protobuf:"bytes,6,rep,name=Range,proto3" json:"Range,omitempty"` // 标记请求体范围
}

func (x *HttpResData) Reset() {
	*x = HttpResData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResData) ProtoMessage() {}

func (x *HttpResData) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResData.ProtoReflect.Descriptor instead.
func (*HttpResData) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{32}
}

func (x *HttpResData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HttpResData) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HttpResData) GetBodyIndex() int64 {
	if x != nil {
		return x.BodyIndex
	}
	return 0
}

func (x *HttpResData) GetHttpVersion() string {
	if x != nil {
		return x.HttpVersion
	}
	return ""
}

func (x *HttpResData) GetRange() []*Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// http 单个响应组 用于包含 不同服务响应中的附带信息
type HttpResGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpResData     *HttpResData     `protobuf:"bytes,1,opt,name=httpResData,proto3" json:"httpResData,omitempty"`
	AnnotationsText *AnnotationsText `protobuf:"bytes,2,opt,name=annotationsText,proto3" json:"annotationsText,omitempty"`
}

func (x *HttpResGroup) Reset() {
	*x = HttpResGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResGroup) ProtoMessage() {}

func (x *HttpResGroup) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResGroup.ProtoReflect.Descriptor instead.
func (*HttpResGroup) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{33}
}

func (x *HttpResGroup) GetHttpResData() *HttpResData {
	if x != nil {
		return x.HttpResData
	}
	return nil
}

func (x *HttpResGroup) GetAnnotationsText() *AnnotationsText {
	if x != nil {
		return x.AnnotationsText
	}
	return nil
}

// http 请求主机的信息
type HttpReqService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port   int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Secure bool   `protobuf:"varint,3,opt,name=secure,proto3" json:"secure,omitempty"` // 是否使用https
}

func (x *HttpReqService) Reset() {
	*x = HttpReqService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpReqService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpReqService) ProtoMessage() {}

func (x *HttpReqService) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpReqService.ProtoReflect.Descriptor instead.
func (*HttpReqService) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{34}
}

func (x *HttpReqService) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HttpReqService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HttpReqService) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

// http信息
type HttpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // id
	Info string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"` // 简述信息
	Tmp  []byte `protobuf:"bytes,3,opt,name=tmp,proto3" json:"tmp,omitempty"`   // 预留类型
}

func (x *HttpInfo) Reset() {
	*x = HttpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpInfo) ProtoMessage() {}

func (x *HttpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpInfo.ProtoReflect.Descriptor instead.
func (*HttpInfo) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{35}
}

func (x *HttpInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HttpInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *HttpInfo) GetTmp() []byte {
	if x != nil {
		return x.Tmp
	}
	return nil
}

// 注释信息
type AnnotationsText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInfo bool           `protobuf:"varint,1,opt,name=isInfo,proto3" json:"isInfo,omitempty"`                                          // 是否有注解信息
	Notes  string         `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`                                             // 注解文本
	Color  HighlightColor `protobuf:"varint,3,opt,name=color,proto3,enum=BurpMorePossibilityApi.HighlightColor" json:"color,omitempty"` // 颜色
}

func (x *AnnotationsText) Reset() {
	*x = AnnotationsText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BurpMorePossibility_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationsText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationsText) ProtoMessage() {}

func (x *AnnotationsText) ProtoReflect() protoreflect.Message {
	mi := &file_BurpMorePossibility_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationsText.ProtoReflect.Descriptor instead.
func (*AnnotationsText) Descriptor() ([]byte, []int) {
	return file_BurpMorePossibility_proto_rawDescGZIP(), []int{36}
}

func (x *AnnotationsText) GetIsInfo() bool {
	if x != nil {
		return x.IsInfo
	}
	return false
}

func (x *AnnotationsText) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *AnnotationsText) GetColor() HighlightColor {
	if x != nil {
		return x.Color
	}
	return HighlightColor_NONE
}

var File_BurpMorePossibility_proto protoreflect.FileDescriptor

var file_BurpMorePossibility_proto_rawDesc = []byte{
	0x0a, 0x19, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x42, 0x75, 0x72,
	0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x70, 0x69, 0x22, 0xfb, 0x03, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x42,
	0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x74, 0x79, 0x70,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x09,
	0x48, 0x74, 0x74, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x52, 0x09, 0x48, 0x74, 0x74, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x75,
	0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x4e, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f,
	0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xae, 0x01, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x75, 0x72,
	0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x44, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x67, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x52, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x4e, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x9b, 0x01, 0x0a, 0x11, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x75, 0x72, 0x70,
	0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9c, 0x01,
	0x0a, 0x12, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c,
	0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xd2, 0x01, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x72, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0xd3, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x48, 0x0a,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x48, 0x74, 0x74, 0x70,
	0x45, 0x64, 0x69, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x75, 0x72,
	0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x42,
	0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x42, 0x75, 0x72, 0x70,
	0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x54, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x47, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x47, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f,
	0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x75, 0x72, 0x70,
	0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4e, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x22,
	0xf1, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x1d, 0x0a, 0x05, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x19, 0x0a, 0x03, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x96, 0x01, 0x0a,
	0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x42, 0x75,
	0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x72, 0x70, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6e, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x72, 0x75, 0x64,
	0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x63, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x15, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x72, 0x75, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x49, 0x6e, 0x74, 0x72, 0x75, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45,
	0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x26, 0x0a, 0x08, 0x42, 0x79, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x4a, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x0d,
	0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x75, 0x72,
	0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x03, 0x72, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x42, 0x75, 0x72, 0x70,
	0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x75, 0x72,
	0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f,
	0x64, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42,
	0x6f, 0x64, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x68, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x75, 0x72, 0x70,
	0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x67, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x51, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x75, 0x72, 0x70,
	0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x64, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x6f, 0x64, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x45, 0x0a,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4c, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x22, 0x40, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x74, 0x6d, 0x70, 0x22, 0x7d, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f,
	0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69,
	0x2e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x58, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x41, 0x4c, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05,
	0x2a, 0x3c, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x52, 0x54,
	0x41, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x2a, 0x27,
	0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x2a, 0xc8, 0x01, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x52, 0x4f, 0x58, 0x59, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x52, 0x55, 0x44, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x43, 0x4f, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x45,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x10, 0x0c, 0x2a, 0xff, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x52, 0x55, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x52, 0x55,
	0x44, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x09, 0x12, 0x15, 0x0a,
	0x11, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x52, 0x10, 0x0a, 0x2a, 0x7b, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x59, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x4b, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x41, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x41, 0x59, 0x10,
	0x09, 0x32, 0xa8, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x72, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x6a, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x72, 0x1a, 0x25, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x12,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x72, 0x1a, 0x25, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5d, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x42,
	0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x1a, 0x28, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x32, 0x7e, 0x0a, 0x18,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x1a, 0x1b, 0x2e, 0x42, 0x75,
	0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x22, 0x00, 0x28, 0x01, 0x32, 0x82, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x12, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x1a, 0x32, 0x2e,
	0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x32, 0xf2, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x80, 0x01, 0x0a, 0x26, 0x61, 0x64, 0x64, 0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x42,
	0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x28, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x48, 0x74, 0x74, 0x70, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x28, 0x2e, 0x42, 0x75,
	0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x1d, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x22, 0x00, 0x32, 0x8e, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x72, 0x75,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x18, 0x49, 0x6e, 0x74,
	0x72, 0x75, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2c, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x20, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x32, 0xa6, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x72,
	0x75, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x49,
	0x6e, 0x74, 0x72, 0x75, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x2d, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x75, 0x64, 0x65,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x2e,
	0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x32, 0xd0, 0x01, 0x0a, 0x14, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74,
	0x42, 0x6f, 0x78, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x52, 0x65, 0x71,
	0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x20, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x49, 0x73, 0x52, 0x65, 0x71, 0x48, 0x74,
	0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x42, 0x75, 0x72, 0x70,
	0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x1d, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x22, 0x00, 0x32, 0xd0, 0x01, 0x0a, 0x14, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x45,
	0x64, 0x69, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x42, 0x75,
	0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x42, 0x6f, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x20, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x49, 0x73, 0x52, 0x65,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x42,
	0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x64, 0x69, 0x74, 0x42, 0x6f,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1d, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x22, 0x00, 0x32, 0x84, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x11, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x27, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6e, 0x75,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x00, 0x32, 0x73, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1b, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x1a, 0x20,
	0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x32, 0x87, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x1a, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x24, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x2a,
	0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0x8b, 0x01, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x1a, 0x2b, 0x2e, 0x42, 0x75,
	0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xf9, 0x01, 0x0a, 0x0f, 0x48,
	0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x71,
	0x0a, 0x19, 0x48, 0x74, 0x74, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x42, 0x75,
	0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x1a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x27, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x2a, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x4d,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70,
	0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x46, 0x0a, 0x1a, 0x42, 0x75, 0x72, 0x70, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x72, 0x70, 0x41, 0x70, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x42, 0x07, 0x42, 0x75, 0x72, 0x70, 0x41, 0x70, 0x69, 0x50, 0x01, 0x5a,
	0x17, 0x2f, 0x42, 0x75, 0x72, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x48, 0x4c, 0x57, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BurpMorePossibility_proto_rawDescOnce sync.Once
	file_BurpMorePossibility_proto_rawDescData = file_BurpMorePossibility_proto_rawDesc
)

func file_BurpMorePossibility_proto_rawDescGZIP() []byte {
	file_BurpMorePossibility_proto_rawDescOnce.Do(func() {
		file_BurpMorePossibility_proto_rawDescData = protoimpl.X.CompressGZIP(file_BurpMorePossibility_proto_rawDescData)
	})
	return file_BurpMorePossibility_proto_rawDescData
}

var file_BurpMorePossibility_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_BurpMorePossibility_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_BurpMorePossibility_proto_goTypes = []interface{}{
	(AuditIssueSeverity)(0),            // 0: BurpMorePossibilityApi.AuditIssueSeverity
	(AuditIssueConfidence)(0),          // 1: BurpMorePossibilityApi.AuditIssueConfidence
	(HttpSource)(0),                    // 2: BurpMorePossibilityApi.HttpSource
	(HttpFlowSource)(0),                // 3: BurpMorePossibilityApi.httpFlowSource
	(ServerTypeName)(0),                // 4: BurpMorePossibilityApi.serverTypeName
	(HighlightColor)(0),                // 5: BurpMorePossibilityApi.highlightColor
	(*AuditIssue)(nil),                 // 6: BurpMorePossibilityApi.AuditIssue
	(*HttpFlowReqData)(nil),            // 7: BurpMorePossibilityApi.httpFlowReqData
	(*HttpFlowResData)(nil),            // 8: BurpMorePossibilityApi.httpFlowResData
	(*PayloadProcessorData)(nil),       // 9: BurpMorePossibilityApi.PayloadProcessorData
	(*ProxyHistoryData)(nil),           // 10: BurpMorePossibilityApi.ProxyHistoryData
	(*SubscriptOffsets)(nil),           // 11: BurpMorePossibilityApi.SubscriptOffsets
	(*HttpRequestAction)(nil),          // 12: BurpMorePossibilityApi.HttpRequestAction
	(*HttpResponseAction)(nil),         // 13: BurpMorePossibilityApi.HttpResponseAction
	(*ProxyRequestAction)(nil),         // 14: BurpMorePossibilityApi.ProxyRequestAction
	(*ProxyResponseAction)(nil),        // 15: BurpMorePossibilityApi.ProxyResponseAction
	(*HttpEditBoxData)(nil),            // 16: BurpMorePossibilityApi.HttpEditBoxData
	(*HttpKeyValuePair)(nil),           // 17: BurpMorePossibilityApi.httpKeyValuePair
	(*HttpEditorKeyValue)(nil),         // 18: BurpMorePossibilityApi.httpEditorKeyValue
	(*MenuInfo)(nil),                   // 19: BurpMorePossibilityApi.MenuInfo
	(*Menu)(nil),                       // 20: BurpMorePossibilityApi.Menu
	(*MenuItem)(nil),                   // 21: BurpMorePossibilityApi.MenuItem
	(*ContextMenuItems)(nil),           // 22: BurpMorePossibilityApi.ContextMenuItems
	(*MenuItemsReturn)(nil),            // 23: BurpMorePossibilityApi.MenuItemsReturn
	(*Boole)(nil),                      // 24: BurpMorePossibilityApi.Boole
	(*ProcessingStatus)(nil),           // 25: BurpMorePossibilityApi.processingStatus
	(*Str)(nil),                        // 26: BurpMorePossibilityApi.Str
	(*ServiceRoutingTable)(nil),        // 27: BurpMorePossibilityApi.serviceRoutingTable
	(*ServiceRegisterRouting)(nil),     // 28: BurpMorePossibilityApi.serviceRegisterRouting
	(*ServiceRegisterRoutingList)(nil), // 29: BurpMorePossibilityApi.serviceRegisterRoutingList
	(*IntruderGeneratorData)(nil),      // 30: BurpMorePossibilityApi.IntruderGeneratorData
	(*InsertionPointOffsets)(nil),      // 31: BurpMorePossibilityApi.InsertionPointOffsets
	(*ByteData)(nil),                   // 32: BurpMorePossibilityApi.ByteData
	(*PayloadGeneratorResult)(nil),     // 33: BurpMorePossibilityApi.PayloadGeneratorResult
	(*HttpReqAndRes)(nil),              // 34: BurpMorePossibilityApi.httpReqAndRes
	(*HttpReqData)(nil),                // 35: BurpMorePossibilityApi.httpReqData
	(*Range)(nil),                      // 36: BurpMorePossibilityApi.Range
	(*HttpReqGroup)(nil),               // 37: BurpMorePossibilityApi.httpReqGroup
	(*HttpResData)(nil),                // 38: BurpMorePossibilityApi.httpResData
	(*HttpResGroup)(nil),               // 39: BurpMorePossibilityApi.httpResGroup
	(*HttpReqService)(nil),             // 40: BurpMorePossibilityApi.httpReqService
	(*HttpInfo)(nil),                   // 41: BurpMorePossibilityApi.httpInfo
	(*AnnotationsText)(nil),            // 42: BurpMorePossibilityApi.annotationsText
}
var file_BurpMorePossibility_proto_depIdxs = []int32{
	0,  // 0: BurpMorePossibilityApi.AuditIssue.severity:type_name -> BurpMorePossibilityApi.AuditIssueSeverity
	1,  // 1: BurpMorePossibilityApi.AuditIssue.confidence:type_name -> BurpMorePossibilityApi.AuditIssueConfidence
	0,  // 2: BurpMorePossibilityApi.AuditIssue.typicalSeverity:type_name -> BurpMorePossibilityApi.AuditIssueSeverity
	34, // 3: BurpMorePossibilityApi.AuditIssue.HttpGroup:type_name -> BurpMorePossibilityApi.httpReqAndRes
	37, // 4: BurpMorePossibilityApi.httpFlowReqData.httpReqGroup:type_name -> BurpMorePossibilityApi.httpReqGroup
	3,  // 5: BurpMorePossibilityApi.httpFlowReqData.httpFlowSource:type_name -> BurpMorePossibilityApi.httpFlowSource
	34, // 6: BurpMorePossibilityApi.httpFlowResData.httpReqAndRes:type_name -> BurpMorePossibilityApi.httpReqAndRes
	3,  // 7: BurpMorePossibilityApi.httpFlowResData.httpFlowSource:type_name -> BurpMorePossibilityApi.httpFlowSource
	34, // 8: BurpMorePossibilityApi.ProxyHistoryData.httpReqAndResData:type_name -> BurpMorePossibilityApi.httpReqAndRes
	37, // 9: BurpMorePossibilityApi.HttpRequestAction.httpReqGroup:type_name -> BurpMorePossibilityApi.httpReqGroup
	39, // 10: BurpMorePossibilityApi.HttpResponseAction.httpResGroup:type_name -> BurpMorePossibilityApi.httpResGroup
	37, // 11: BurpMorePossibilityApi.ProxyRequestAction.httpReqGroup:type_name -> BurpMorePossibilityApi.httpReqGroup
	39, // 12: BurpMorePossibilityApi.ProxyResponseAction.httpResGroup:type_name -> BurpMorePossibilityApi.httpResGroup
	34, // 13: BurpMorePossibilityApi.HttpEditBoxData.httpReqAndResData:type_name -> BurpMorePossibilityApi.httpReqAndRes
	32, // 14: BurpMorePossibilityApi.httpEditorKeyValue.key:type_name -> BurpMorePossibilityApi.ByteData
	32, // 15: BurpMorePossibilityApi.httpEditorKeyValue.value:type_name -> BurpMorePossibilityApi.ByteData
	26, // 16: BurpMorePossibilityApi.httpEditorKeyValue.editorName:type_name -> BurpMorePossibilityApi.Str
	20, // 17: BurpMorePossibilityApi.MenuInfo.menu:type_name -> BurpMorePossibilityApi.Menu
	20, // 18: BurpMorePossibilityApi.Menu.menuList:type_name -> BurpMorePossibilityApi.Menu
	21, // 19: BurpMorePossibilityApi.Menu.menuItemList:type_name -> BurpMorePossibilityApi.MenuItem
	2,  // 20: BurpMorePossibilityApi.ContextMenuItems.selectSource:type_name -> BurpMorePossibilityApi.HttpSource
	34, // 21: BurpMorePossibilityApi.ContextMenuItems.httpReqAndRes:type_name -> BurpMorePossibilityApi.httpReqAndRes
	11, // 22: BurpMorePossibilityApi.ContextMenuItems.selectOffsets:type_name -> BurpMorePossibilityApi.SubscriptOffsets
	28, // 23: BurpMorePossibilityApi.serviceRoutingTable.Routing:type_name -> BurpMorePossibilityApi.serviceRegisterRouting
	4,  // 24: BurpMorePossibilityApi.serviceRegisterRouting.serverType:type_name -> BurpMorePossibilityApi.serverTypeName
	28, // 25: BurpMorePossibilityApi.serviceRegisterRoutingList.serviceList:type_name -> BurpMorePossibilityApi.serviceRegisterRouting
	31, // 26: BurpMorePossibilityApi.IntruderGeneratorData.insertionPointOffsets:type_name -> BurpMorePossibilityApi.InsertionPointOffsets
	35, // 27: BurpMorePossibilityApi.httpReqAndRes.req:type_name -> BurpMorePossibilityApi.httpReqData
	38, // 28: BurpMorePossibilityApi.httpReqAndRes.res:type_name -> BurpMorePossibilityApi.httpResData
	41, // 29: BurpMorePossibilityApi.httpReqAndRes.info:type_name -> BurpMorePossibilityApi.httpInfo
	42, // 30: BurpMorePossibilityApi.httpReqAndRes.annotationsText:type_name -> BurpMorePossibilityApi.annotationsText
	40, // 31: BurpMorePossibilityApi.httpReqData.httpReqService:type_name -> BurpMorePossibilityApi.httpReqService
	36, // 32: BurpMorePossibilityApi.httpReqData.Range:type_name -> BurpMorePossibilityApi.Range
	35, // 33: BurpMorePossibilityApi.httpReqGroup.httpReqData:type_name -> BurpMorePossibilityApi.httpReqData
	42, // 34: BurpMorePossibilityApi.httpReqGroup.annotationsText:type_name -> BurpMorePossibilityApi.annotationsText
	36, // 35: BurpMorePossibilityApi.httpResData.Range:type_name -> BurpMorePossibilityApi.Range
	38, // 36: BurpMorePossibilityApi.httpResGroup.httpResData:type_name -> BurpMorePossibilityApi.httpResData
	42, // 37: BurpMorePossibilityApi.httpResGroup.annotationsText:type_name -> BurpMorePossibilityApi.annotationsText
	5,  // 38: BurpMorePossibilityApi.annotationsText.color:type_name -> BurpMorePossibilityApi.highlightColor
	26, // 39: BurpMorePossibilityApi.BurpServer.RegisterRealTimeTrafficMirroring:input_type -> BurpMorePossibilityApi.Str
	29, // 40: BurpMorePossibilityApi.BurpServer.RegisterServerList:input_type -> BurpMorePossibilityApi.serviceRegisterRoutingList
	26, // 41: BurpMorePossibilityApi.BurpServer.GetProxyHistory:input_type -> BurpMorePossibilityApi.Str
	6,  // 42: BurpMorePossibilityApi.BurpServer.ReportIssue:input_type -> BurpMorePossibilityApi.AuditIssue
	34, // 43: BurpMorePossibilityApi.RealTimeTrafficMirroring.RealTimeTrafficMirroring:input_type -> BurpMorePossibilityApi.httpReqAndRes
	26, // 44: BurpMorePossibilityApi.RegisterServerRoutingList.RegisterServerList:input_type -> BurpMorePossibilityApi.Str
	18, // 45: BurpMorePossibilityApi.ScoutServer.addHttpEditorEncryptAndDecryptKeyValue:input_type -> BurpMorePossibilityApi.httpEditorKeyValue
	17, // 46: BurpMorePossibilityApi.ScoutServer.AddHttpKeyValuePair:input_type -> BurpMorePossibilityApi.httpKeyValuePair
	9,  // 47: BurpMorePossibilityApi.IntruderPayloadProcessorServer.IntruderPayloadProcessor:input_type -> BurpMorePossibilityApi.PayloadProcessorData
	30, // 48: BurpMorePossibilityApi.IntruderPayloadGeneratorServer.IntruderPayloadGeneratorProvider:input_type -> BurpMorePossibilityApi.IntruderGeneratorData
	16, // 49: BurpMorePossibilityApi.HttpReqEditBoxAssist.ReqHttpEdit:input_type -> BurpMorePossibilityApi.HttpEditBoxData
	16, // 50: BurpMorePossibilityApi.HttpReqEditBoxAssist.IsReqHttpEditFor:input_type -> BurpMorePossibilityApi.HttpEditBoxData
	16, // 51: BurpMorePossibilityApi.HttpResEditBoxAssist.ResHttpEdit:input_type -> BurpMorePossibilityApi.HttpEditBoxData
	16, // 52: BurpMorePossibilityApi.HttpResEditBoxAssist.IsResHttpEditFor:input_type -> BurpMorePossibilityApi.HttpEditBoxData
	22, // 53: BurpMorePossibilityApi.ContextMenuItemsProvider.MenuItemsProvider:input_type -> BurpMorePossibilityApi.ContextMenuItems
	26, // 54: BurpMorePossibilityApi.GetConTextMenuItemsServer.GetConTextMenuItems:input_type -> BurpMorePossibilityApi.Str
	37, // 55: BurpMorePossibilityApi.ProxyRequestHandler.ProxyHandleRequestReceived:input_type -> BurpMorePossibilityApi.httpReqGroup
	34, // 56: BurpMorePossibilityApi.ProxyResponseHandler.ProxyHandleResponseReceived:input_type -> BurpMorePossibilityApi.httpReqAndRes
	7,  // 57: BurpMorePossibilityApi.HttpFlowHandler.HttpHandleRequestReceived:input_type -> BurpMorePossibilityApi.httpFlowReqData
	8,  // 58: BurpMorePossibilityApi.HttpFlowHandler.HttpHandleResponseReceived:input_type -> BurpMorePossibilityApi.httpFlowResData
	34, // 59: BurpMorePossibilityApi.BurpServer.RegisterRealTimeTrafficMirroring:output_type -> BurpMorePossibilityApi.httpReqAndRes
	25, // 60: BurpMorePossibilityApi.BurpServer.RegisterServerList:output_type -> BurpMorePossibilityApi.processingStatus
	34, // 61: BurpMorePossibilityApi.BurpServer.GetProxyHistory:output_type -> BurpMorePossibilityApi.httpReqAndRes
	25, // 62: BurpMorePossibilityApi.BurpServer.ReportIssue:output_type -> BurpMorePossibilityApi.processingStatus
	26, // 63: BurpMorePossibilityApi.RealTimeTrafficMirroring.RealTimeTrafficMirroring:output_type -> BurpMorePossibilityApi.Str
	29, // 64: BurpMorePossibilityApi.RegisterServerRoutingList.RegisterServerList:output_type -> BurpMorePossibilityApi.serviceRegisterRoutingList
	25, // 65: BurpMorePossibilityApi.ScoutServer.addHttpEditorEncryptAndDecryptKeyValue:output_type -> BurpMorePossibilityApi.processingStatus
	24, // 66: BurpMorePossibilityApi.ScoutServer.AddHttpKeyValuePair:output_type -> BurpMorePossibilityApi.Boole
	32, // 67: BurpMorePossibilityApi.IntruderPayloadProcessorServer.IntruderPayloadProcessor:output_type -> BurpMorePossibilityApi.ByteData
	33, // 68: BurpMorePossibilityApi.IntruderPayloadGeneratorServer.IntruderPayloadGeneratorProvider:output_type -> BurpMorePossibilityApi.PayloadGeneratorResult
	32, // 69: BurpMorePossibilityApi.HttpReqEditBoxAssist.ReqHttpEdit:output_type -> BurpMorePossibilityApi.ByteData
	24, // 70: BurpMorePossibilityApi.HttpReqEditBoxAssist.IsReqHttpEditFor:output_type -> BurpMorePossibilityApi.Boole
	32, // 71: BurpMorePossibilityApi.HttpResEditBoxAssist.ResHttpEdit:output_type -> BurpMorePossibilityApi.ByteData
	24, // 72: BurpMorePossibilityApi.HttpResEditBoxAssist.IsResHttpEditFor:output_type -> BurpMorePossibilityApi.Boole
	23, // 73: BurpMorePossibilityApi.ContextMenuItemsProvider.MenuItemsProvider:output_type -> BurpMorePossibilityApi.MenuItemsReturn
	19, // 74: BurpMorePossibilityApi.GetConTextMenuItemsServer.GetConTextMenuItems:output_type -> BurpMorePossibilityApi.MenuInfo
	14, // 75: BurpMorePossibilityApi.ProxyRequestHandler.ProxyHandleRequestReceived:output_type -> BurpMorePossibilityApi.ProxyRequestAction
	15, // 76: BurpMorePossibilityApi.ProxyResponseHandler.ProxyHandleResponseReceived:output_type -> BurpMorePossibilityApi.ProxyResponseAction
	12, // 77: BurpMorePossibilityApi.HttpFlowHandler.HttpHandleRequestReceived:output_type -> BurpMorePossibilityApi.HttpRequestAction
	13, // 78: BurpMorePossibilityApi.HttpFlowHandler.HttpHandleResponseReceived:output_type -> BurpMorePossibilityApi.HttpResponseAction
	59, // [59:79] is the sub-list for method output_type
	39, // [39:59] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_BurpMorePossibility_proto_init() }
func file_BurpMorePossibility_proto_init() {
	if File_BurpMorePossibility_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BurpMorePossibility_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFlowReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFlowResData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadProcessorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyHistoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResponseAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyResponseAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpEditBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpKeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpEditorKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Menu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextMenuItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuItemsReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Str); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRoutingTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRegisterRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRegisterRoutingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntruderGeneratorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertionPointOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadGeneratorResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpReqAndRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpReqGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpReqService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BurpMorePossibility_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationsText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BurpMorePossibility_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   13,
		},
		GoTypes:           file_BurpMorePossibility_proto_goTypes,
		DependencyIndexes: file_BurpMorePossibility_proto_depIdxs,
		EnumInfos:         file_BurpMorePossibility_proto_enumTypes,
		MessageInfos:      file_BurpMorePossibility_proto_msgTypes,
	}.Build()
	File_BurpMorePossibility_proto = out.File
	file_BurpMorePossibility_proto_rawDesc = nil
	file_BurpMorePossibility_proto_goTypes = nil
	file_BurpMorePossibility_proto_depIdxs = nil
}
